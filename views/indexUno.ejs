<%- include('layout/header') %>
 <!-- Fine dell' header -->


<div class="container my-3">
  <div class="row">
    <div class="col-12 text-center">
      <!-- Pulsante per visualizzare la mappa -->
      <button id="toggle-map" class="btn btn-primary  mt-3 rounded-circle"><strong>+</strong></button>
    </div>
  </div>
 
  <!-- Mappa -->
  <div id="map" style='width: 100%; height: 400px; margin-top: 20px; display: none; transition: all 0.3s ease-in-out'>
  </div>
</div>
<div class='container'>
  <div class="row my-4">
    <div class="col-lg-12">
       <!-- Pulsante per visualizzare la mappa -->
      <% if (message) { %> 
        <div class="alert alert-dismissible fade show alert-<%= message.type %>" role="alert">
          <button class="btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
          <i class="fas fa-exclamation-circle me-2"></i>   
          <strong><%= message.message %></strong>     
        </div>
             <% } %>

      <div class="table-responsive">
        <% if (user) { %>
          <h2>Bienvenue, <%= user.email %>!</h2>
        
          <a href="/logout" class="btn btn-secondary">Se d√©connecter</a>
        <% } else { %>
          <a href="/login">Se connecter</a>
          <a href="/signup">S'inscrire</a>
        <% } %>
         <!-- Verifico se ci sono degli articles -->
        <% if (articles && articles.length > 0) { %>   
          <table class="table table-hover table-bordered table-striped text-center">
            <thead class="table-dark">
              <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Name</th>
                <th>Category</th>                               
                <th>Action</th>
              </tr>
            </thead>
            <tbody>

    <!-- FINE FRONTEND 1 -->
               <!-- Rendo disponibili i valori di tutti gli articles con articles.forEach -->               
              <% articles.forEach((row, index)=> { %> 
              
                <tr class="align-middle">                
                  <td><%= index %></td>                  
                  <td><img src="/uploads/<%= row.image %>" class="rounded-circle img-thumbnail" width="60" /></td>
                  <td><%= row.name %></td>
                 
                  <td><%= row.category %></td>
                          
                  <td>
                    <a href="/edit/<%= row._id %>" class="btn btn-sm btn-outline-success"><i class="fas fa-edit"></i></a>
                    <a href="/delete/<%= row._id %>" class="btn btn-sm btn-outline-danger"><i class="fas fa-trash"></i></a>
                  </td>
                </tr>



<!-- INIZIO FRONTEND 2: Logica aggiuntiva per elaborare groupedByUser -->
 
<!-- FINE FRONTEND 2-->
              <% }) %>
            </tbody>
          </table>
        <% } else { %>
          <h1 class="text-center text-secondary mt-5">Aucun article trouv√© dans la base de donn√©es!</h1>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Map Initialization Script -->
<script defer>
  document.addEventListener("DOMContentLoaded", function() {
    let map; // Declare map variable
    let layerGroup = L.featureGroup(); // Initialize layerGroup once
    var drawnItems = new L.FeatureGroup();

    // Function to initialize the map (runs only once)
    function initializeMap() {
      map = L.map("map", { center: [43.2, 1.30], zoom: 10 });

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", { 
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);
     
      map.addLayer(drawnItems); // Add drawnItems layer to map     
      layerGroup.addTo(map); // Add the feature group to the map
   
    var drawControl = new L.Control.Draw({
       edit: {
        featureGroup: drawnItems,  // Gruppo di poligoni che possono essere modificati
        edit: true,                // Permetti la modifica dei poligoni
        remove: false              // Non permettere la rimozione (puoi cambiarlo)
    },
    draw: false  // Disabilita la creazione di nuovi poligoni
});
map.addControl(drawControl);

      // Evento per la modifica dei poligoni
      map.on('draw:edited', function(event) {
        var layers = event.layers;
        layers.eachLayer(function(layer) {
          console.log(layer.getLatLngs()); // Mostra i nuovi vertici
        });
      });
  
    document.getElementById('edit-polygons-btn').addEventListener('click', function () {
    drawControl._toolbars.edit._modes.edit.handler.enable(); // Abilita la modalit√† di modifica
  });
    } 


  function updateMap(groupedByUser) {
    console.log('Dati ricevuti in updateMap:', groupedByUser);

    if (!groupedByUser || Object.keys(groupedByUser).length === 0) {
        console.error('GroupedByUser √® vuoto o non valido:', groupedByUser);
        return;
    }

    layerGroup.clearLayers(); // Rimuove tutti i marker e i poligoni esistenti

    // Stili per i poligoni
    const polylineStyles = {
    "bon": { color: 'blue', weight: 2, fillColor: 'blue', fillOpacity: 0.0 },
    "moyen": { color: 'gray', weight: 2, fillColor: 'gray', fillOpacity: 0.0 },
    "bas": { color: 'red', weight: 2, fillColor: 'red', fillOpacity: 0.0 }
    };
    const groupedMarkers = {
            "bon": [],
            "moyen": [],
            "bas": []
        };
    // Icone per i marker
    const icons = {
        "bon": L.icon({
          iconSize: [19, 30],
            iconAnchor: [8, 30],
            popupAnchor: [2, -30],
            shadowSize: [31, 30],
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png', // URL dell'ombra predefinita di Leaflet
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
     }),
        "moyen": L.icon({
          iconSize: [19, 30],
            iconAnchor: [8, 30],
            popupAnchor: [2, -30],
            shadowSize: [31, 30],
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png', // URL dell'ombra predefinita di Leaflet
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
        }),
        "bas": L.icon({
          iconSize: [19, 30],
            iconAnchor: [8, 30],
            popupAnchor: [2, -30],
            shadowSize: [31, 30],
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png', // URL dell'ombra predefinita di Leaflet
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
        })
    }; 
   

   // üîπ 1¬∞ parte (groupedByUser)
    //Itera sugli utenti per creare marker e poligoni
    Object.keys(groupedByUser).forEach(userId => {
      const userGroup = groupedByUser[userId]; // Ottieni il gruppo dell'utente
    const userArticlesGrouped = userGroup.groupedByType; // Ottieni gli articoli raggruppati per tipo
    
    console.log("Dati per l'utente:", userId, userArticlesGrouped); // Stampa i dati dell'utente
    console.log("Tipo di userArticlesGrouped:", typeof userArticlesGrouped);
console.log("Valore di userArticlesGrouped:", userArticlesGrouped);



// üîπ Itera su ogni tipo di dati dentro userArticlesGrouped
Object.keys(userArticlesGrouped).forEach((groupKey) => {
    const userData = userArticlesGrouped[groupKey];
    console.log("Dati per il gruppo:", groupKey, userData);
});
   // üîπ Gestione dei poligoni per 'trepunti'
   if (userArticlesGrouped?.trepunti) {
        Object.keys(userArticlesGrouped.trepunti).forEach(groupKey => {
            const groupArticles = userArticlesGrouped.trepunti[groupKey];

            if (groupArticles.length >= 3) {
                const latLngs = groupArticles.map(article => [
                    parseFloat(article.latitudeSelectionee || 0),
                    parseFloat(article.longitudeSelectionee || 0)
                ]);

                const category = groupArticles[0]?.category || 'moyen';
                const polygon = L.polygon(latLngs, polylineStyles[category]);
                layerGroup.addLayer(polygon);
            }
        });
    }

    // üîπ Gestione dei poligoni per 'triangle'
    if (userArticlesGrouped?.triangle) {
        Object.keys(userArticlesGrouped.triangle).forEach(groupKey => {
            const groupArticles = userArticlesGrouped.triangle[groupKey];

            if (groupArticles.length >= 3) {
                const latLngs = groupArticles.map(article => [
                    parseFloat(article.latitudeSelectionee || 0),
                    parseFloat(article.longitudeSelectionee || 0)
                ]);

                const category = groupArticles[0]?.category || 'moyen';
                const polygon = L.polygon(latLngs, polylineStyles[category]);
                layerGroup.addLayer(polygon);
            }
        });
    }
 // **GESTIONE DEI MARKER**
 if (userGroup.articles) {
            userGroup.articles.forEach(article => {
                const lat = parseFloat(article.latitudeSelectionee);
                const lng = parseFloat(article.longitudeSelectionee);
                const category = article.category || 'moyen';
 
                const marker = L.marker([lat, lng], { icon: icons[category], draggable: true });
                marker.bindPopup(`
                    <b>${article.name}</b><br>
                    <strong>ID user: ${article.user._id}</strong><br>
                    <strong>${article._id}</strong><br>
                    <img src="/uploads/${article.image}" alt="Immagine" class="img-thumbnail" width="100">
                `);
                layerGroup.addLayer(marker);
            });
        }
// Ora lavora su userArticlesGrouped (dati separati per utente)
const latLngs = userArticlesGrouped?.trepunti?.trePunti?.map(article => [
    parseFloat(article.latitudeSelectionee || 0),
    parseFloat(article.longitudeSelectionee || 0)
]) || [];

        if (latLngs.length >= 3) {
          const category = userArticlesGrouped?.trepunti?.trePunti?.[0]?.category || 'moyen';

           // const category = articles[0]?.category || 'moyen';
            const polygon = L.polygon(latLngs, polylineStyles[category]);
            layerGroup.addLayer(polygon);
        }  
      
        // Itera sui dati dell'utente per ogni articolo
        Object.values(userArticlesGrouped).forEach(group => {
          group.forEach(article => {
          const lat = parseFloat(article.latitude || article.latitudeSelectionee);
          const lng = parseFloat(article.longitude || article.longitudeSelectionee);
          console.log("Coordinate articolo:", lat, lng);
          });
 const groupedByUser = <%- JSON.stringify(groupedByUser) %>;
  
  console.log("Grouped Articles data:", groupedArticlesT)
  //üîπ 2¬∞ parte (groupedArticlesByType)
 // Raggruppa gli articoli per tipo usando la funzione gi√† esistente
 /*
     const groupedArticlesByType = groupedArticles;
    console.log("groupedArticlesByType['trepunti']:", groupedArticlesByType['trepunti']);
      
// **Nuovo codice: Raggruppa gli articoli di tipo 'trepunti' per gruppo 'trePunti'**
const groupedTrePunti = Object.keys(groupedArticlesByType['trepunti'] || {}).reduce((acc, groupKey) => {
    const trePuntiArticles = groupedArticlesByType['trepunti'][groupKey];
    acc[groupKey] = trePuntiArticles; // Aggiungi gli articoli di tipo 'trepunti' per quel gruppo
    return acc;
}, {});

console.log("Grouped trePunti by Group:", groupedTrePunti);

// **Crea poligoni per ogni gruppo di articoli 'trepunti'**
Object.keys(groupedTrePunti).forEach((group) => {
    const trePuntiArticles = groupedTrePunti[group];
    console.log(`Rendering trePunti for group: ${group}`, trePuntiArticles);

    // Crea il poligono per il gruppo corrente
    const latLngs = trePuntiArticles.map((article) => [
        parseFloat(article.latitudeSelectionee),
        parseFloat(article.longitudeSelectionee),
    ]);
    const category = trePuntiArticles[0]?.category; // Usa la categoria del primo articolo del gruppo

    // **Crea il poligono se ci sono almeno 3 punti**
    if (latLngs.length >= 3) { 
        // In base alla categoria, applichiamo lo stile appropriato
        const polygon = L.polygon(latLngs, polylineStyles[category]);
        drawnItems.addLayer(polygon); // Aggiungi il poligono al layer sulla mappa
    }
});

     // **Nuovo codice: Raggruppa i triangoli per gruppo**
     const groupedTriangles = Object.keys(groupedArticlesByType['triangle'] || {}).reduce((acc, groupKey) => {
        const triangles = groupedArticlesByType['triangle'][groupKey];
        acc[groupKey] = triangles; // Aggiungi i triangoli di quel gruppo
        return acc;
    }, {});
    
    console.log("Grouped Triangles by Group:", groupedTriangles);
    
    // **Crea poligoni per ogni gruppo di triangoli**
    Object.keys(groupedTriangles).forEach((group) => {
        const triangles = groupedTriangles[group];
       const latLngs = triangles.map((article) => [
        parseFloat(article.latitudeSelectionee),
        parseFloat(article.longitudeSelectionee),
    ]);
    const category = triangles[0]?.category; // O sostituisci con il nome corretto della propriet√†

    if (latLngs.length >= 3) { 
        const polygon = L.polygon(latLngs, polylineStyles[category]);
        drawnItems.addLayer(polygon); 
    }
});



     // **Codice esistente: gestione dei marker**
     Object.keys(groupedArticlesByType).forEach((type) => {
      const groupedArticlesByType = groupedArticles;
        const articlesOfType = groupedArticlesByType[type];

        // Raggruppa gli articoli per categoria dentro ogni tipo
        const groupedMarkersByCategory = {
            "bon": [],
            "moyen": [],
            "bas": []
        };
        Object.values(articlesOfType).forEach((articles) => {
            articles.forEach((article) => {
              const category = article.category || 'moyen'; // Default 'moyen'
              groupedMarkersByCategory[category].push(article);
            });
          });
          
        // Crea marker e poligoni per ciascuna categoria nel tipo corrente
       
   }); 
 */
        });

        // DUE Crea i raggi collegando i nodi corrispondenti
        createRaggi(groupedMarkers);
    });
 
 
 console.log("Grouped Markers prima di creare i raggi:", groupedMarkers);
    // Adatta la mappa per includere tutti i marker e i poligoni
    if (layerGroup.getLayers().length > 0) {
        map.fitBounds(layerGroup.getBounds());
    }
}
function createRaggi(groupedMarkers) {
  console.log("Grouped Markers all'inizio:", groupedMarkers);

     // Normalizza groupedMarkers
     ['bon', 'moyen', 'bas'].forEach(category => {
        if (!groupedMarkers[category]) {
            groupedMarkers[category] = [];
        }
    });
  const verticesBon = {};
    const verticesMoyen = {};
    const verticesMauvais = {};

    // Popola i vertici per ogni categoria
    for (const [index, article] of groupedMarkers['bon'].entries()) {
        console.log("Articolo Bon:", article);
        verticesBon[index + 1] = [article.lat, article.lng];
    }
    for (const [index, article] of groupedMarkers['moyen'].entries()) {
        console.log("Articolo Moyen:", article);
        verticesMoyen[index + 1] = [article.lat, article.lng];
    }
    for (const [index, article] of groupedMarkers['bas'].entries()) {
        console.log("Articolo Bas:", article);
        verticesMauvais[index + 1] = [article.lat, article.lng];
    }

    // Controlla il risultato finale
    console.log("Vertices Bon:", verticesBon);
    console.log("Vertices Moyen:", verticesMoyen);
    console.log("Vertices Mauvais:", verticesMauvais);

       // Disegna le polilinee tra i vertici Moyen e Mauvais
       // Disegna le polilinee tra i vertici Bon, Moyen e Mauvais
for (const key in verticesBon) {
    if (verticesBon.hasOwnProperty(key)) {
        const pointBon = verticesBon[key];
        const pointMoyen = verticesMoyen[key];
        const pointMauvais = verticesMauvais[key];

        // Assicurati che tutti e tre i punti siano definiti
        for (const key in verticesBon) {
        const pointBon = verticesBon[key];
        const pointMoyen = verticesMoyen[key];
        const pointMauvais = verticesMauvais[key];
        if (pointBon && pointMoyen && pointMauvais) {
            console.log(`Disegno polilinee tra Bon, Moyen e Mauvais per il vertice ${key}`);
            drawnItems.addLayer(L.polyline([pointBon, pointMoyen], { color: 'black', weight: 0.9 }));
            drawnItems.addLayer(L.polyline([pointMoyen, pointMauvais], { color: 'black', weight: 0.8 }));
        }
    }
}

    

    // Stampa le coordinate per ogni vertice di Moyen
    for (const [key, coords] of Object.entries(verticesMoyen)) {
        console.log(`Vertice Moyen ${key}:`, coords); // Stampa le coordinate
        // Usa coords[0] e coords[1] per lat e lng rispettivamente
    }

    // Se desideri anche stampare i vertici Mauvais
    for (const [key, coords] of Object.entries(verticesMauvais)) {
        console.log(`Vertice Mauvais ${key}:`, coords); // Stampa le coordinate
        // Usa coords[0] e coords[1] per lat e lng rispettivamente
    }
}
}
    // Function to handle map visibility
    function toggleMap() { 

      const mapElement = document.getElementById('map');
      const toggleButton = document.getElementById('toggle-map');
      
      if (mapElement.style.display === 'none') {
        mapElement.style.display = 'block';
        toggleButton.textContent = '+';

        // Initialize map only once, then update content
        if (!map) {
          initializeMap();
        }
           // Recupera i dati e aggiorna la mappa
   fetch('/api/grouped-by-user')
  .then(response => {
    if (!response.ok) {
      throw new Error(`Errore nella risposta del server: ${response.status}`);
    }
    return response.json();
  })
  .then(groupedByUser => {
    console.log('Dati ricevuti nel toggle :', groupedByUser);
    if (!groupedByUser || typeof groupedByUser !== 'object') {
      console.error('I dati ricevuti non sono validi:', groupedByUser);
      return;
    }
    updateMap(groupedByUser); // Aggiorna la mappa con i dati validi
  })
  .catch(error => {
    console.error('Errore nel recupero dei dati dal server:', error);
  });


        setTimeout(() => {
          map.invalidateSize(); // // Ridimensiona la mappa
         if (groupedByUser) updateMap(groupedByUser); // Passa i dati esistenti
        }, 100); // Short delay to ensure rendering
      } else {
        mapElement.style.display = 'none';
        toggleButton.textContent = '-';
      }
    }

    // Attach event listener to toggle button
    document.getElementById('toggle-map').addEventListener('click', toggleMap);
  });
</script>
<script defer>

  function saveMapChanges(articleId, newLat, newLng) {
      fetch(`/api/articles/${articleId}`, {
          method: 'PUT',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ latitudeSelectionee: newLat, longitudeSelectionee: newLng })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
           console.log("Calling API with ID:", articleId);
              console.log("Modifica salvata nel database.", data.article);
          } else {
              console.error("Errore durante il salvataggio:", data.message);
          }
      })
      .catch(error => console.error("Errore nel salvataggio della modifica:", error));
  }

 
</script>


<script>
  const groupedByUser = <%- JSON.stringify(groupedByUser ) %>;
  console.log("Grouped By User data:", groupedByUser);
</script>

<%- include('layout/footer') %>