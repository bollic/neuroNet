<%- include('layout/header') %>
 <!-- Fine dell' header -->


<div class="container my-3">
  <div class="row">
    <div class="col-12 text-center">
      <!-- Pulsante per visualizzare la mappa -->
      <button id="toggle-map" class="btn btn-primary">Visualiser la carte</button>
    </div>
  </div>
 
  <!-- Mappa -->
  <div id="map" style='width: 100%; height: 300px; display: none; transition: all 0.3s ease-in-out'>
  </div>
</div>
<div class='container'>
  <div class="row my-4">
    <div class="col-lg-12">
       <!-- Pulsante per visualizzare la mappa -->
    
      <% if (message) { %> 
        <div class="alert alert-dismissible fade show alert-<%= message.type %>" role="alert">
          <button class="btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
          <i class="fas fa-exclamation-circle me-2"></i>   
          <strong><%= message.message %></strong>     
        </div>
             <% } %>

      <div class="table-responsive">
        <% if (user) { %>
          <h2>Bienvenue, <%= user.email %>!</h2>
          <a href="/logout">Se déconnecter</a>
        <% } else { %>
          <a href="/login">Se connecter</a>
          <a href="/signup">S'inscrire</a>
        <% } %>
         <!-- Verifico se ci sono degli articles -->
        <% if (articles && articles.length > 0) { %>   
          <table class="table table-hover table-bordered table-striped text-center">
            <thead class="table-dark">
              <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Name</th>
                <th>VERTEX</th>
                <th>Category</th>
                <th>idUser</th>                
                <th>LAT LNG</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>

               <!-- Inizializzazione delle variabili lato client -->
      <script>
     
        if (typeof filteredUsers === 'undefined') var filteredUsers = [];
        if (typeof groupedByUser === 'undefined') var groupedByUser = {};
      </script>
    
               <!-- Rendo disponibili i valori di tutti gli articles con articles.forEach -->               
              <% articles.forEach((row, index)=> { 
                 %> 
  
                <tr class="align-middle">                
                  <td><%= index %></td>                  
                  <td><img src="/uploads/<%= row.image %>" class="rounded-circle img-thumbnail" width="60" /></td>
                  <td><%= row.name %></td>
                  <td><%= row.vertex %></td>
                  <td><%= row.category %></td>
                  <td><%= row.user.email %></td>                  
                  <td>
                    <% if (row.latitudeSelectionee && row.longitudeSelectionee) { %>
                      <%= row.latitudeSelectionee %>, <%= row.longitudeSelectionee %>
                    <% } else { %>
                      N/A
                    <% } %>
                  </td>
                  <td>
                    <a href="/edit/<%= row._id %>" class="btn btn-sm btn-outline-success"><i class="fas fa-edit"></i></a>
                    <a href="/delete/<%= row._id %>" class="btn btn-sm btn-outline-danger"><i class="fas fa-trash"></i></a>
                  </td>
                </tr>
    <script>     
         
    {
    const articleData = {
      _id: "<%= row._id || '' %>",
      name: "<%= row.name %>",
      vertex: "<%= row.vertex %>",
      email: "<%= row.user.email %>",                    
      latitudeSelectionee: "<%= row.latitudeSelectionee || '' %>",
      longitudeSelectionee: "<%= row.longitudeSelectionee || '' %>",
      image: "<%= row.image %>",
      category: "<%= row.category %>"
    };
    const userId = "<%= row.user._id %>"; // Usa questa una sola volta
    // Aggiungo a filteredUsers
    filteredUsers.push(articleData);

    // Aggiungo a groupedByUser
    if (!groupedByUser[userId]) {
      groupedByUser[userId] = [];
    }
    groupedByUser[userId].push(articleData);

    // Debugging
    console.log("Articolo aggiunto a filteredUsers:", JSON.stringify(articleData, null, 2));
    console.log("Articolo raggruppato in groupedByUser:", JSON.stringify(groupedByUser[userId], null, 2));
  }
    </script>
              <% }) %>
            </tbody>
          </table>
        <% } else { %>
          <h1 class="text-center text-secondary mt-5">Aucun article trouvé dans la base de données!</h1>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Map Initialization Script -->
<script defer>
  document.addEventListener("DOMContentLoaded", function() {
    let map; // Declare map variable
    let layerGroup = L.featureGroup(); // Initialize layerGroup once
    var drawnItems = new L.FeatureGroup();

    // Function to initialize the map (runs only once)
    function initializeMap() {
      map = L.map("map", { center: [43.2, 1.30], zoom: 10 });

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", { 
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);
     
      map.addLayer(drawnItems); // Add drawnItems layer to map     
      layerGroup.addTo(map); // Add the feature group to the map
   
    var drawControl = new L.Control.Draw({
       edit: {
        featureGroup: drawnItems,  // Gruppo di poligoni che possono essere modificati
        edit: true,                // Permetti la modifica dei poligoni
        remove: false              // Non permettere la rimozione (puoi cambiarlo)
    },
    draw: false  // Disabilita la creazione di nuovi poligoni
});
map.addControl(drawControl);

      // Evento per la modifica dei poligoni
      map.on('draw:edited', function(event) {
        var layers = event.layers;
        layers.eachLayer(function(layer) {
          console.log(layer.getLatLngs()); // Mostra i nuovi vertici
        });
      });
    // Aggiungi l'evento per il pulsante che abilita la modifica dei poligoni
    document.getElementById('edit-polygons-btn').addEventListener('click', function () {
    drawControl._toolbars.edit._modes.edit.handler.enable(); // Abilita la modalità di modifica
  });
    } // Fine della funzione initializeMap() 
  
    // Carica groupedByUser dal server
  
  // Funzione per aggiornare la mappa
function updateMap() {
    layerGroup.clearLayers(); // Clear existing markers/polylines
    if (!filteredUsers || filteredUsers.length === 0) return;
   // if (typeof filteredUsers !== 'undefined' && filteredUsers.length > 0) {
         // Carica groupedByUser dal server
  

    //console.log("Dati raggruppati per utente:", groupedByUser);
      const polylineStyles = {
            "bon": { color: 'blue', weight: 4 },
            "moyen": { color: 'gray', weight: 4 },
            "bas": { color: 'red', weight: 4 }
        };

        const icons = {
            "bon": L.icon({
                iconSize: [25, 41],
                iconAnchor: [10, 41],
                popupAnchor: [2, -40],
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
            }),
            "moyen": L.icon({
                iconSize: [25, 41],
                iconAnchor: [10, 41],
                popupAnchor: [2, -40],
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
            }),
            "bas": L.icon({
                iconSize: [25, 41],
                iconAnchor: [10, 41],
                popupAnchor: [2, -40],
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
            })
        };

        // Array per raccogliere marker per ogni categoria
        const groupedMarkers = {
            "bon": [],
            "moyen": [],
            "bas": []
        };
        // Oggetto per raggruppare articoli per utente
          const groupedByUser = {}; 


          // Itera sui dati e popola i marker 
        filteredUsers.forEach(article => {
          if (!article || typeof article !== 'object') {
    console.error(`Problema con l'article:`, article);
    return; // Salta questo articolo
  }
            const lat = parseFloat(article.latitudeSelectionee);
            const lng = parseFloat(article.longitudeSelectionee);
            const userIcon = icons[article.category] || icons['moyen'];
            
            // Raccogli per utente
               const userId = article.userId || 'Unknown'; // Adatta a seconda del tuo schema dati
               if (!groupedByUser[userId]) {
                   groupedByUser[userId] = [];
               }
               groupedByUser[userId].push({
                  _id: article._id,
                  name: article.name,
                  category: article.category,
                  latitude: lat,
                  longitude: lng,
                  image: article.image,
               });

            // Aggiungi il marker all'array per categoria
            if (groupedMarkers[article.category]) {
               groupedMarkers[article.category].push([lat, lng]);
               // groupedMarkers[article.category].push({ lat, lng, id: article._id, vertex: article.vertex }); // Includi vertex
            }
          });
    
       // Crea i marker per ogni utente
        for (const userId in groupedByUser) {
            const userGroup = groupedByUser[userId];
            console.log(`Creazione marker e poligoni per l'utente ${userId}:`, userGroup);
            // Itera sugli articoli dell'utente
          userGroup.forEach(article => {
           // const latLng = [article.latitude, article.longitude];
            // Crea marker per l'articolo  
             const userIcon = icons[article.category] || icons['moyen'];
         // Crea il marker
            const singleMarker = L.marker([article.latitude, article.longitude], { icon: userIcon, draggable: true });
            singleMarker.on('dragend', function(e) {
                const newLatLng = e.target.getLatLng();
                saveMapChanges(article._id, newLatLng.lat, newLatLng.lng);
           });
            
            singleMarker.bindPopup(`
                <br><strong>${article.name}</strong></br>
                <br><strong>${article.category}</strong></br>
                <div class='flex-shrink-0 h-20 w-20'>
                    <img class='h-20 w-20 rounded-full' alt='' src="/uploads/${article.image}">
                </div>`
            );
                // Aggiungi un evento per il trascinamento del marker
            /*    singleMarker.on('dragend', function(event) {
                    const newPosition = event.target.getLatLng();
                    console.log(`Nuova posizione per ${article.name}:`, newPosition);
                    // Aggiorna l'oggetto `filteredUsers`
                    article.latitudeSelectionee = newPosition.lat;
                    article.longitudeSelectionee = newPosition.lng;
                });*/


            layerGroup.addLayer(singleMarker);
               // Raccogli i punti per i poligoni
            if (groupedMarkers[article.category]) {
                groupedMarkers[article.category].push([article.latitude, article.longitude]);
            }
        });
      }

        // Crea poligoni chiusi per ciascuna categoria
        for (const category in groupedMarkers) {
            const latLngs = groupedMarkers[category];
            if (latLngs.length  >= 3) {
                // Crea una polilinea chiusa
                const polygon = L.polygon(latLngs, polylineStyles[category]);
              //  layerGroup.addLayer(polygon);
               // Aggiungi il poligono al gruppo modificabile
        drawnItems.addLayer(polygon);
            }
        }
      
        // Adatta la mappa per includere tutti i marker e polilinee
        if (layerGroup.getLayers().length > 0) {
            map.fitBounds(layerGroup.getBounds());
        }
    }



    // Function to update markers and polylines on the map
    /*function updateMap() {
      layerGroup.clearLayers(); // Clear existing markers/polylines

      if (typeof filteredUsers !== 'undefined' && filteredUsers.length > 0) {
        const polylineStyles = {
          "bon": { color: 'blue', weight: 4 },
          "moyen": { color: 'gray', weight: 4 },
          "bas": { color: 'red', weight: 4 }
        };

        const icons = {
          "bon": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
          }),
          "moyen": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
          }),
          "bas": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
          })
        };

        filteredUsers.forEach((article, idx) => {
          const lat = parseFloat(article.latitudeSelectionee);
          const lng = parseFloat(article.longitudeSelectionee);
          const userIcon = icons[article.category] || icons['moyen'];
          const polylineStyle = polylineStyles[article.category] || polylineStyles['moyen'];

          // Create marker for the current article
          const singleMarker = L.marker([lat, lng], { icon: userIcon, draggable: true });
          singleMarker.bindPopup(`
            <br><strong>${article.name}</strong></br>
            <br><strong>${article.category}</strong></br>
            <div class='flex-shrink-0 h-20 w-20'>
              <img class='h-20 w-20 rounded-full' alt='' src="/uploads/${article.image}">
            </div>`
          );
          layerGroup.addLayer(singleMarker);

          // Create polyline to the next article
          const nextArticle = filteredUsers[idx + 1];
          if (nextArticle) {
            const nextLat = parseFloat(nextArticle.latitudeSelectionee);
            const nextLng = parseFloat(nextArticle.longitudeSelectionee);
            const polyline = L.polyline([[lat, lng], [nextLat, nextLng]], polylineStyle);
            layerGroup.addLayer(polyline);
          }
        });

        // Fit the map to the bounds of the markers and polylines
        if (layerGroup.getLayers().length > 0) {
          map.fitBounds(layerGroup.getBounds());
        }
      }
    }
*/
    // Function to handle map visibility
    function toggleMap() { 

      const mapElement = document.getElementById('map');
      const toggleButton = document.getElementById('toggle-map');
  
      if (mapElement.style.display === 'none') {
        mapElement.style.display = 'block';
        toggleButton.textContent = 'Efface la carte';

        // Initialize map only once, then update content
        if (!map) {
          initializeMap();
        }

        setTimeout(() => {
          map.invalidateSize(); // Ensure map is resized
          updateMap(); // Update markers and polylines
        }, 100); // Short delay to ensure rendering
      } else {
        mapElement.style.display = 'none';
        toggleButton.textContent = 'Visualiser la carte';
      }
    }

    // Attach event listener to toggle button
    document.getElementById('toggle-map').addEventListener('click', toggleMap);
  });
</script>
<script defer>

  function saveMapChanges(articleId, newLat, newLng) {
      fetch(`/api/articles/${articleId}`, {
          method: 'PUT',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ latitudeSelectionee: newLat, longitudeSelectionee: newLng })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
           console.log("Calling API with ID:", articleId);
              console.log("Modifica salvata nel database.", data.article);
          } else {
              console.error("Errore durante il salvataggio:", data.message);
          }
      })
      .catch(error => console.error("Errore nel salvataggio della modifica:", error));
  }

 
</script>

<%- include('layout/footer') %>