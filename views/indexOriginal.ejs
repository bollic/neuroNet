<%- include('layout/header') %>
 <!-- Fine dell' header -->


<div class="container my-3">
  <div class="row">
    <div class="col-12 text-center">
      <!-- Pulsante per visualizzare la mappa -->
      <button id="toggle-map" class="btn btn-primary  mt-3 rounded-circle"><strong>+</strong></button>
    </div>
  </div>
 
  <!-- Mappa -->
  <div id="map" style='width: 100%; height: 400px; margin-top: 20px; display: none; transition: all 0.3s ease-in-out'>
  </div>
</div>
<div class='container'>
  <div class="row my-4">
    <div class="col-lg-12">
       <!-- Pulsante per visualizzare la mappa -->
      <% if (message) { %> 
        <div class="alert alert-dismissible fade show alert-<%= message.type %>" role="alert">
          <button class="btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
          <i class="fas fa-exclamation-circle me-2"></i>   
          <strong><%= message.message %></strong>     
        </div>
             <% } %>
             <% if (!user) { %>
              <div class="container text-center my-5">
                <h2>Seleziona l'area di accesso</h2>
                <div class="d-flex justify-content-center gap-3 mt-4">
                  <a href="/login?role=office" class="btn btn-primary btn-lg px-4">Office</a>
                  <a href="/login?role=field" class="btn btn-success btn-lg px-4">Field</a>
                  <a href="/login?role=admin" class="btn btn-danger btn-lg px-4">Admin</a>
                </div>
              </div>
              <% } %>
              
      <div class="table-responsive">
        <% if (user) { %>
          <h2>Bienvenue, <%= user.email %>!</h2>
        
          <a href="/logout" class="btn btn-secondary">Se d√©connecter</a>
        <% } else { %>
          <a href="/login">Se connecter</a>
          <a href="/signup">S'inscrire</a>
        <% } %>
         <!-- Verifico se ci sono degli articles -->
        <% if (articles && articles.length > 0) { %>   
          <table class="table table-hover table-bordered table-striped text-center">
            <thead class="table-dark">
              <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Name</th>
                <th>Category</th>                               
                <th>Action</th>
              </tr>
            </thead>
            <tbody>

    <!-- FINE FRONTEND 1 -->
               <!-- Rendo disponibili i valori di tutti gli articles con articles.forEach -->               
              <% articles.forEach((row, index)=> { %> 
              
                <tr class="align-middle">                
                  <td><%= index %></td>                  
                  <td><img src="/uploads/<%= row.image %>" class="rounded-circle img-thumbnail" width="60" /></td>
                  <td><%= row.name %></td>
                 
                  <td><%= row.category %></td>
                          
                  <td>
                    <a href="/edit/<%= row._id %>" class="btn btn-sm btn-outline-success"><i class="fas fa-edit"></i></a>
                    <a href="/delete/<%= row._id %>" class="btn btn-sm btn-outline-danger"><i class="fas fa-trash"></i></a>
                  </td>
                </tr>

<!-- INIZIO FRONTEND 2: Logica aggiuntiva per elaborare groupedByUser -->
 
<!-- FINE FRONTEND 2-->
              <% }) %>
            </tbody>
          </table>
        <% } else { %>
          <h1 class="text-center text-secondary mt-5">Aucun article trouv√© dans la base de donn√©es!</h1>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Map Initialization Script -->
<script defer>
  document.addEventListener("DOMContentLoaded", function() {
    let map; // Declare map variable
    let layerGroup = L.featureGroup(); // Initialize layerGroup once
    var drawnItems = new L.FeatureGroup();

    // Function to initialize the map (runs only once)
    function initializeMap() {
      map = L.map("map", { center: [43.2, 1.30], zoom: 10 });

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", { 
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);
     
      map.addLayer(drawnItems); // Add drawnItems layer to map     
      layerGroup.addTo(map); // Add the feature group to the map
   
    var drawControl = new L.Control.Draw({
       edit: {
        featureGroup: drawnItems,  // Gruppo di poligoni che possono essere modificati
        edit: true,                // Permetti la modifica dei poligoni
        remove: false              // Non permettere la rimozione (puoi cambiarlo)
    },
    draw: false  // Disabilita la creazione di nuovi poligoni
});
map.addControl(drawControl);

      // Evento per la modifica dei poligoni
      map.on('draw:edited', function(event) {
        var layers = event.layers;
        layers.eachLayer(function(layer) {
          console.log(layer.getLatLngs()); // Mostra i nuovi vertici
        });
      });
  
    document.getElementById('edit-polygons-btn').addEventListener('click', function () {
    drawControl._toolbars.edit._modes.edit.handler.enable(); // Abilita la modalit√† di modifica
  });
    } 


  function updateMap(groupedByUser) {
    console.log('Dati ricevuti in updateMap:', groupedByUser);

    if (!groupedByUser || Object.keys(groupedByUser).length === 0) {
        console.error('GroupedByUser √® vuoto o non valido:', groupedByUser);
        return;
    };
    const polylineStyles = {
    "bon": { color: 'blue', weight: 2, fillColor: 'blue', fillOpacity: 0.0 },
    "moyen": { color: 'gray', weight: 2, fillColor: 'gray', fillOpacity: 0.0 },
    "bas": { color: 'red', weight: 2, fillColor: 'red', fillOpacity: 0.0 }
    };
    const groupedMarkers = {
            "bon": [],
            "moyen": [],
            "bas": []
        };
    const icons = {
        "bon": L.icon({
          iconSize: [19, 30],
            iconAnchor: [8, 30],
            popupAnchor: [2, -30],
            shadowSize: [31, 30],
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png', // URL dell'ombra predefinita di Leaflet
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
     }),
        "moyen": L.icon({
          iconSize: [19, 30],
            iconAnchor: [8, 30],
            popupAnchor: [2, -30],
            shadowSize: [31, 30],
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png', // URL dell'ombra predefinita di Leaflet
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
        }),
        "bas": L.icon({
          iconSize: [19, 30],
            iconAnchor: [8, 30],
            popupAnchor: [2, -30],
            shadowSize: [31, 30],
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png', // URL dell'ombra predefinita di Leaflet
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
        })
    }; 
   

   // üîπ 1¬∞ parte (groupedByUser)
    //Itera sugli utenti per creare marker e poligoni
    Object.keys(groupedByUser).forEach(userId => {
      const userGroup = groupedByUser[userId]; // Ottieni il gruppo dell'utente
    const userArticlesGrouped = userGroup.groupedByType; // Ottieni gli articoli raggruppati per tipo
    
   // console.log("Dati per l'utente:", userId, userArticlesGrouped); // Stampa i dati dell'utente
   // console.log("Tipo di userArticlesGrouped:", typeof userArticlesGrouped);
   // console.log("Valore di userArticlesGrouped:", userArticlesGrouped);
   // console.log('User Articles Grouped:', userArticlesGrouped);


// üîπ Itera su ogni tipo di dati dentro userArticlesGrouped

Object.keys(userArticlesGrouped).forEach((groupKey) => {
    const groupArticles  = userArticlesGrouped[groupKey];
    console.log("Dati per il gruppo:", groupKey, groupArticles );
});
   // üîπ Gestione dei poligoni per 'trepunti'
   console.log("Articoli di tipo trepunti:", userArticlesGrouped.trepunti);

   if (userArticlesGrouped?.trepunti) {
        Object.keys(userArticlesGrouped.trepunti).forEach(groupKey => {
            const groupArticles = userArticlesGrouped.trepunti[groupKey];
                 if (groupArticles.length < 3) {
                  console.log("Non abbastanza coordinate per creare il poligono", latLngs);
                                                }
                if (groupArticles.length >= 3) {
    console.log("I VERTICI SONO 3? Creazione poligono con", groupArticles.length, "articoli");

    const latLngs = groupArticles
        .filter(article => article.coordinates && Array.isArray(article.coordinates) && article.coordinates.length >= 2)
        .map(article => [
            parseFloat(article.coordinates[0]),  
            parseFloat(article.coordinates[1])   
        ]);

    console.log("Ecco le coordinate per il poligono", latLngs);
    console.log("üìç Dati per il poligono:", JSON.stringify(latLngs, null, 2));

    if (latLngs.length >= 3) {
        const category = groupArticles[0]?.category || 'bas';
        const polygon = L.polygon(latLngs, polylineStyles[category] || polylineStyles['bas']);
        console.log("üü¢ Poligono creato:", polygon);

        layerGroup.addLayer(polygon);
map.fitBounds(polygon.getBounds());
 // üî• Sposta la vista sulla zona del poligono
console.log("üîé LayerGroup contiene:", layerGroup.getLayers());

    } else {
        console.log("‚ö†Ô∏è Non abbastanza punti validi per creare un poligono.");
    }
};

          
        });
    }

    // üîπ Gestione dei poligoni per 'triangle'
    console.log("Articoli di tipo triangle:", userArticlesGrouped.triangle);

    if (userArticlesGrouped?.triangle) {
        Object.keys(userArticlesGrouped.triangle).forEach(groupKey => {
            const groupArticles = userArticlesGrouped.triangle[groupKey];
            if (groupArticles.length < 3) {
    console.log("Non abbastanza coordinate per creare il poligono", latLngs);
}
            if (groupArticles.length >= 3) {
               console.log("I VERTICI SONO 3? Creazione poligono con", groupArticles.length, "articoli");

              const latLngs = groupArticles
             .filter(article => article.coordinates && Array.isArray(article.coordinates) && article.coordinates.length >= 2)
             .map(article => [
              parseFloat(article.coordinates[0]),  
              parseFloat(article.coordinates[1])   
             ]);

              if (latLngs.length >= 3) {
            const category = groupArticles[0]?.category || 'bas';
           const polygon = L.polygon(latLngs, polylineStyles[category] || polylineStyles['bas']);
            console.log("üü¢ Poligono creato:", polygon);

            layerGroup.addLayer(polygon);
            map.fitBounds(polygon.getBounds());
            // üî• Sposta la vista sulla zona del poligono
            console.log("üîé LayerGroup contiene:", layerGroup.getLayers());

               } else {
              console.log("‚ö†Ô∏è Non abbastanza punti validi per creare un poligono.");
                      }
            } //  FINE  if (userArticlesGrouped?.triangle) {


        });
    }
 // **GESTIONE DEI MARKER**
 if (userGroup.articles) {
            userGroup.articles.forEach(article => {
                const lat = parseFloat(article.latitudeSelectionee);
                const lng = parseFloat(article.longitudeSelectionee);
                const category = article.category || 'moyen';
 
                const marker = L.marker([lat, lng], { icon: icons[category], draggable: true });
                marker.bindPopup(`
                    <b>${article.name}</b><br>
                    <strong>ID user: ${article.user._id}</strong><br>
                    <strong>${article._id}</strong><br>
                    <img src="/uploads/${article.image}" alt="Immagine" class="img-thumbnail" width="100">
                `);
                layerGroup.addLayer(marker);
            });
        }
// Ora lavora su userArticlesGrouped (dati separati per utente)
const latLngs = userArticlesGrouped?.trepunti?.trePunti?.map(article => [
    parseFloat(article.latitudeSelectionee || 0),
    parseFloat(article.longitudeSelectionee || 0)
]) || [];

        if (latLngs.length >= 3) {
          const category = userArticlesGrouped?.trepunti?.trePunti?.[0]?.category || 'bas';
            const polygon = L.polygon(latLngs, polylineStyles[category]);
            layerGroup.addLayer(polygon);
        };  
      
        // Itera sui dati dell'utente per ogni articolo
        Object.values(userArticlesGrouped).forEach(group => {
          console.log("Dati per il gruppo:", group);
            // Verifica se group √® un oggetto (non un array)
       if (Array.isArray(group)) {
    // Se √® un array, puoi usare forEach
          group.forEach(article => {
              // Verifica se le coordinate esistono e accedi agli indici corretti
      if (article.coordinates && Array.isArray(article.coordinates) && article.coordinates.length >= 2) {
        const lat = parseFloat(article.coordinates[0]); // latitudine
        const lng = parseFloat(article.coordinates[1]); // longitudine

           // Log dettagliato per vedere cosa stiamo ricevendo
    
      console.log("Lat (parsed): ", lat, "Lng (parsed): ", lng);
               // Se le coordinate non sono numeriche, logga un avviso
      if (isNaN(lat) || isNaN(lng)) {
        console.log("ATTENZIONE: Coordinate non valide per l'articolo", article);
      } else {
        console.log("Coordinate articolo:", lat, lng);
      }
    } else {
        console.log("ATTENZIONE: Le coordinate sono mancanti o non valide per l'articolo", article);
      }
          });
        } else {
    // Se group √® un oggetto, usa Object.values per ottenere un array
    Object.values(group).forEach(innerGroup => {
      console.log("innerGroup non √® un array:", innerGroup);
           // Verifica se innerGroup √® un array prima di chiamare forEach
      
      // Verifica se ogni propriet√† dell'oggetto √® un array e iteriamo su quelle
      if (innerGroup.original && Array.isArray(innerGroup.original)) {
        innerGroup.original.forEach(article => {
            // Verifica se l'articolo ha la propriet√† coordinates e se √® un array
            if (article.coordinates && Array.isArray(article.coordinates) && article.coordinates.length === 2) {
       
          const lat = parseFloat(article.coordinates[0]);
          const lng = parseFloat(article.coordinates[1]);   
        
          // Se le coordinate non sono numeriche, logga un avviso
          if (isNaN(lat) || isNaN(lng)) {
            console.log("ATTENZIONE: Coordinate non valide per l'articolo (scaled1)", article);
          } else {
            console.log("Coordinate articolo (scaled1):", lat, lng);
          }
        } else {
            console.log("ATTENZIONE: Le coordinate sono mancanti o non valide per l'articolo (original)", article);
            console.log("Contenuto delle coordinate:", article.coordinates);
          }
        });
      }
      if (innerGroup.scaled1 && Array.isArray(innerGroup.scaled1)) {
        innerGroup.scaled1.forEach(article => {
          if (article.coordinates && Array.isArray(article.coordinates) && article.coordinates.length === 2) {       
          const lat = parseFloat(article.coordinates[0]); 
          const lng = parseFloat(article.coordinates[1]);
          // Se le coordinate non sono numeriche, logga un avviso
          if (isNaN(lat) || isNaN(lng)) {
            console.log("ATTENZIONE: Coordinate non valide per l'articolo (scaled1)", article);
          } else {
            console.log("Coordinate articolo (scaled1):", lat, lng);
          } 
        } else {
            console.log("ATTENZIONE: Le coordinate sono mancanti o non valide per l'articolo (original)", article);
            console.log("Contenuto delle coordinate:", article.coordinates);
          }
        });
      }
      if (innerGroup.scaled2 && Array.isArray(innerGroup.scaled2)) {
        innerGroup.scaled2.forEach(article => {
          if (article.coordinates && Array.isArray(article.coordinates) && article.coordinates.length === 2) {
       
          const lat = parseFloat(article.coordinates[0]);
          const lng = parseFloat(article.coordinates[1]);    // Log dettagliato per vedere cosa stiamo ricevendo
       // Log dettagliato per vedere cosa stiamo ricevendo
   
          // Se le coordinate non sono numeriche, logga un avviso
          if (isNaN(lat) || isNaN(lng)) {
            console.log("ATTENZIONE: Coordinate non valide per l'articolo (scaled1)", article);
          } else {
            console.log("Coordinate articolo (scaled1):", lat, lng);
          }
        } else {
              console.log("Contenuto delle coordinate:", article.coordinates);
          }
        });
      }
      if (innerGroup.trePunti && Array.isArray(innerGroup.trePunti)) {
        innerGroup.trePunti.forEach(article => {
          const lat = parseFloat(article.coordinates[0]);
          const lng = parseFloat(article.coordinates[1]);    // Log dettagliato per vedere cosa stiamo ricevendo
    // Log dettagliato per vedere cosa stiamo ricevendo
     console.log("Articolo (scaled1):", article);
        
          console.log("Lat (parsed): ", lat, "Lng (parsed): ", lng);

          // Se le coordinate non sono numeriche, logga un avviso
          if (isNaN(lat) || isNaN(lng)) {
            console.log("ATTENZIONE: Coordinate non valide per l'articolo (scaled1)", article);
          } else {
            console.log("Coordinate articolo (scaled1):", lat, lng);
          }
        });
      }
    });
   
  }  
  const groupedByUserData = <%- JSON.stringify(groupedByUser) %>;
console.log("Grouped Articles data:", groupedByUserData);
 
 
        });

        // DUE Crea i raggi collegando i nodi corrispondenti
        createRaggi(groupedMarkers);
    });
 
 
 console.log("Grouped Markers prima di creare i raggi:", groupedMarkers);
    // Adatta la mappa per includere tutti i marker e i poligoni
    if (layerGroup.getLayers().length > 0) {
        map.fitBounds(layerGroup.getBounds());
    }
}
function createRaggi(groupedMarkers) {
  console.log("Grouped Markers all'inizio:", groupedMarkers);

     // Normalizza groupedMarkers
     ['bon', 'moyen', 'bas'].forEach(category => {
        if (!groupedMarkers[category]) {
            groupedMarkers[category] = [];
        }
    });
  const verticesBon = {};
    const verticesMoyen = {};
    const verticesMauvais = {};

    // Popola i vertici per ogni categoria
    for (const [index, article] of groupedMarkers['bon'].entries()) {
        console.log("Articolo Bon:", article);
        verticesBon[index + 1] = [article.lat, article.lng];
    }
    for (const [index, article] of groupedMarkers['moyen'].entries()) {
        console.log("Articolo Moyen:", article);
        verticesMoyen[index + 1] = [article.lat, article.lng];
    }
    for (const [index, article] of groupedMarkers['bas'].entries()) {
        console.log("Articolo Bas:", article);
        verticesMauvais[index + 1] = [article.lat, article.lng];
    }

    // Controlla il risultato finale
   // console.log("Vertices Bon:", verticesBon);
  //  console.log("Vertices Moyen:", verticesMoyen);
   // console.log("Vertices Mauvais:", verticesMauvais);

       // Disegna le polilinee tra i vertici Bon, Moyen e Mauvais
for (const key in verticesBon) {
    if (verticesBon.hasOwnProperty(key)) {
        const pointBon = verticesBon[key];
        const pointMoyen = verticesMoyen[key];
        const pointMauvais = verticesMauvais[key];

        // Assicurati che tutti e tre i punti siano definiti
        for (const key in verticesBon) {
        const pointBon = verticesBon[key];
        const pointMoyen = verticesMoyen[key];
        const pointMauvais = verticesMauvais[key];
        if (pointBon && pointMoyen && pointMauvais) {
            console.log(`Disegno polilinee tra Bon, Moyen e Mauvais per il vertice ${key}`);
            drawnItems.addLayer(L.polyline([pointBon, pointMoyen], { color: 'black', weight: 0.9 }));
            drawnItems.addLayer(L.polyline([pointMoyen, pointMauvais], { color: 'black', weight: 0.8 }));
        }
    }
}

    

    // Stampa le coordinate per ogni vertice di Moyen
    for (const [key, coords] of Object.entries(verticesMoyen)) {
        console.log(`Vertice Moyen ${key}:`, coords); // Stampa le coordinate
        // Usa coords[0] e coords[1] per lat e lng rispettivamente
    }

    // Se desideri anche stampare i vertici Mauvais
    for (const [key, coords] of Object.entries(verticesMauvais)) {
        console.log(`Vertice Mauvais ${key}:`, coords); // Stampa le coordinate
        // Usa coords[0] e coords[1] per lat e lng rispettivamente
    }
}
}
    // Function to handle map visibility
    function toggleMap() { 

      const mapElement = document.getElementById('map');
      const toggleButton = document.getElementById('toggle-map');
      
      if (mapElement.style.display === 'none') {
        mapElement.style.display = 'block';
        toggleButton.textContent = '+';

        // Initialize map only once, then update content
        if (!map) {
          initializeMap();
        }
           // Recupera i dati e aggiorna la mappa
   fetch('/api/grouped-by-user')
  .then(response => {
    if (!response.ok) {
      throw new Error(`Errore nella risposta del server: ${response.status}`);
    }
    return response.json();
  })
  .then(groupedByUser => {
    console.log('Dati ricevuti nel toggle :', groupedByUser);
    if (!groupedByUser || typeof groupedByUser !== 'object') {
      console.error('I dati ricevuti non sono validi:', groupedByUser);
      return;
    }
    updateMap(groupedByUser); // Aggiorna la mappa con i dati validi
  })
  .catch(error => {
    console.error('Errore nel recupero dei dati dal server:', error);
  });


        setTimeout(() => {
          map.invalidateSize(); // // Ridimensiona la mappa
         if (groupedByUser) updateMap(groupedByUser); // Passa i dati esistenti
        }, 100); // Short delay to ensure rendering
      } else {
        mapElement.style.display = 'none';
        toggleButton.textContent = '-';
      }
    }

    // Attach event listener to toggle button
    document.getElementById('toggle-map').addEventListener('click', toggleMap);
  });
</script>
<script defer>

  function saveMapChanges(articleId, newLat, newLng) {
      fetch(`/api/articles/${articleId}`, {
          method: 'PUT',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ latitudeSelectionee: newLat, longitudeSelectionee: newLng })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
           console.log("Calling API with ID:", articleId);
              console.log("Modifica salvata nel database.", data.article);
          } else {
              console.error("Errore durante il salvataggio:", data.message);
          }
      })
      .catch(error => console.error("Errore nel salvataggio della modifica:", error));
  }

 
</script>


<script>
  const groupedByUser = <%- JSON.stringify(groupedByUser ) %>;
  
 // console.log("2. Riga 268. Grouped articles by user:", groupedByUser);
  const userIdTest = '6783c76b4369bb079de8d01a';
/*
if (!groupedByUser[userIdTest]) {
  console.error(`Errore: Nessun dato per userId ${userIdTest}`);
} else if (!groupedByUser[userIdTest].groupedByType) {
  console.error(`Errore: Nessun groupedByType per userId ${userIdTest}`);
} else {
  //console.log(`OK: Trovati i dati per userId ${userIdTest}`);
  //console.log("GroupedByType:", JSON.stringify(groupedByUser[userIdTest].groupedByType, null, 2));
} */
</script>

<%- include('layout/footer') %>