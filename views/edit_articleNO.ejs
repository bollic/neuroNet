<%- include('layout/header') %>

<!-- Form per modificare l'articolo -->
<form action="/edit/<%= article._id %>" method="POST" enctype="multipart/form-data">
    <input type="text" name="name" value="<%= article.name %>" />
    <input type="text" name="latitudeSelectionee" value="<%= article.latitudeSelectionee %>" />
    <input type="text" name="longitudeSelectionee" value="<%= article.longitudeSelectionee %>" />
    <button type="submit">Salva Modifiche</button>
</form>

<!-- Mappa -->
<div id="map" style="width: 100%; height: 400px;"></div>

<script defer>
    document.addEventListener("DOMContentLoaded", function() {
        let map;
        let layerGroup = L.featureGroup(); // Inizializza il gruppo di livelli
        const drawnItems = new L.FeatureGroup();
        let filteredUsers = [];

        // Aggiungi i dati degli articoli nel formato corretto
        articles.forEach((article) => { 
            filteredUsers.push({
                id: "<%= article._id %>",
                name: "<%= article.name %>",
                latitude: "<%= article.latitudeSelectionee %>",
                longitude: "<%= article.longitudeSelectionee %>",
                category: "<%= article.category %>",
                image: "<%= article.image %>"
            });
         });

        console.log("Articoli dell'utente:", filteredUsers);

        // Inizializza la mappa
        function initializeMap() {
            map = L.map("map", { center: [43.2, 1.30], zoom: 10 });

            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);

            layerGroup.addTo(map);
            map.addLayer(drawnItems);

            var drawControl = new L.Control.Draw({
                edit: {
                    featureGroup: drawnItems,
                    edit: true,
                    remove: false
                },
                draw: false
            });

            map.addControl(drawControl);

            // Evento per la modifica dei poligoni
            map.on('draw:edited', function(event) {
                var layers = event.layers;
                layers.eachLayer(function(layer) {
                    console.log(layer.getLatLngs());
                });
            });
        }

        // Funzione per aggiornare i marker sulla mappa
        function updateMap() {
            layerGroup.clearLayers();

            const polylineStyles = {
                "bon": { color: 'blue', weight: 4 },
                "moyen": { color: 'gray', weight: 4 },
                "bas": { color: 'red', weight: 4 }
            };

            const icons = {
                "bon": L.icon({
                    iconSize: [25, 41],
                    iconAnchor: [10, 41],
                    popupAnchor: [2, -40],
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
                }),
                "moyen": L.icon({
                    iconSize: [25, 41],
                    iconAnchor: [10, 41],
                    popupAnchor: [2, -40],
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
                }),
                "bas": L.icon({
                    iconSize: [25, 41],
                    iconAnchor: [10, 41],
                    popupAnchor: [2, -40],
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
                })
            };

            const groupedMarkers = {
                 "bon": [],
                 "moyen": [],
                 "bas": [] 
            };

            filteredUsers.forEach((article) => {
                const lat = parseFloat(article.latitude);
                const lng = parseFloat(article.longitude);
                const userIcon = icons[article.category] || icons['moyen'];

                if (groupedMarkers[article.category]) {
                    groupedMarkers[article.category].push([lat, lng]);
                }

                const singleMarker = L.marker([lat, lng], { icon: userIcon, draggable: true });
                singleMarker.bindPopup(`
                    <b>${article.name}</b><br>
                    <strong>${article.category}</strong><br>
                    <img src="/uploads/${article.image}" alt="Immagine" class="img-thumbnail" width="100">
                `);
                layerGroup.addLayer(singleMarker);
            });

            for (const category in groupedMarkers) {
                const latLngs = groupedMarkers[category];
                if (latLngs.length === 5) {
                    const polygon = L.polygon(latLngs, polylineStyles[category]);
                    drawnItems.addLayer(polygon);
                }
            }

            if (layerGroup.getLayers().length > 0) {
                map.fitBounds(layerGroup.getBounds());
            }
        }

        // Toggle mappa
        function toggleMap() {
            const mapElement = document.getElementById('map');
            if (!map) {
                initializeMap();
            }
            updateMap();
        }

        // Inizializza e aggiorna la mappa
        toggleMap();
    });
</script>

<%- include('layout/footer') %>
