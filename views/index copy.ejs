<%- include('layout/header') %>
 <!-- Fine dell' header -->


<div class="container my-3">
  <div class="row">
    <div class="col-12 text-center">
      <!-- Pulsante per visualizzare la mappa -->
      <button id="toggle-map" class="btn btn-primary">Visualiser la carte</button>
    </div>
  </div>
 
  <!-- Mappa -->
  <div id="map" style='width: 100%; height: 300px; display: none; transition: all 0.3s ease-in-out'>
  </div>
</div>
<div class='container'>
  <div class="row my-4">
    <div class="col-lg-12">
       <!-- Pulsante per visualizzare la mappa -->
      <% if (message) { %> 
        <div class="alert alert-dismissible fade show alert-<%= message.type %>" role="alert">
          <button class="btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
          <i class="fas fa-exclamation-circle me-2"></i>   
          <strong><%= message.message %></strong>     
        </div>
             <% } %>

      <div class="table-responsive">
        <% if (user) { %>
          <h2>Bienvenue, <%= user.email %>!</h2>
          <a href="/logout">Se déconnecter</a>
        <% } else { %>
          <a href="/login">Se connecter</a>
          <a href="/signup">S'inscrire</a>
        <% } %>
         <!-- Verifico se ci sono degli articles -->
        <% if (articles && articles.length > 0) { %>   
          <table class="table table-hover table-bordered table-striped text-center">
            <thead class="table-dark">
              <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Name</th>
                <th>VERTEX</th>
                <th>Category</th>
                <th>idUser</th>                
                <th>LAT LNG</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
<!-- INIZIO FRONTEND 1: Inizializzazione delle variabili lato client -->
      <script>
       // Garantisce che filteredUsers e groupedByUser siano definite
        if (typeof filteredUsers === 'undefined') var filteredUsers = [];
       </script>
    <!-- FINE FRONTEND 1 -->
               <!-- Rendo disponibili i valori di tutti gli articles con articles.forEach -->               
              <% articles.forEach((row, index)=> { %> 
                <script>
                  console.log("Verifica userId:", "<%= row.user && row.user._id ? row.user._id : 'Mancante' %>");
                </script>
                <tr class="align-middle">                
                  <td><%= index %></td>                  
                  <td><img src="/uploads/<%= row.image %>" class="rounded-circle img-thumbnail" width="60" /></td>
                  <td><%= row.name %></td>
                  <td><%= row.vertex %></td>
                  <td><%= row.category %></td>
                  <td><%= row.user.email %></td>                  
                  <td>
                    <% if (row.latitudeSelectionee && row.longitudeSelectionee) { %>
                      <%= row.latitudeSelectionee %>, <%= row.longitudeSelectionee %>
                    <% } else { %>
                      N/A
                    <% } %>
                  </td>
                  <td>
                    <a href="/edit/<%= row._id %>" class="btn btn-sm btn-outline-success"><i class="fas fa-edit"></i></a>
                    <a href="/delete/<%= row._id %>" class="btn btn-sm btn-outline-danger"><i class="fas fa-trash"></i></a>
                  </td>
                </tr>



<!-- INIZIO FRONTEND 2: Logica aggiuntiva per elaborare groupedByUser -->
 
<!-- FINE FRONTEND 2-->
              <% }) %>
            </tbody>
          </table>
        <% } else { %>
          <h1 class="text-center text-secondary mt-5">Aucun article trouvé dans la base de données!</h1>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Map Initialization Script -->
<script defer>
  document.addEventListener("DOMContentLoaded", function() {
    let map; // Declare map variable
    let layerGroup = L.featureGroup(); // Initialize layerGroup once
    var drawnItems = new L.FeatureGroup();

    // Function to initialize the map (runs only once)
    function initializeMap() {
      map = L.map("map", { center: [43.2, 1.30], zoom: 10 });

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", { 
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);
     
      map.addLayer(drawnItems); // Add drawnItems layer to map     
      layerGroup.addTo(map); // Add the feature group to the map
   
    var drawControl = new L.Control.Draw({
       edit: {
        featureGroup: drawnItems,  // Gruppo di poligoni che possono essere modificati
        edit: true,                // Permetti la modifica dei poligoni
        remove: false              // Non permettere la rimozione (puoi cambiarlo)
    },
    draw: false  // Disabilita la creazione di nuovi poligoni
});
map.addControl(drawControl);

      // Evento per la modifica dei poligoni
      map.on('draw:edited', function(event) {
        var layers = event.layers;
        layers.eachLayer(function(layer) {
          console.log(layer.getLatLngs()); // Mostra i nuovi vertici
        });
      });
    // Aggiungi l'evento per il pulsante che abilita la modifica dei poligoni
    document.getElementById('edit-polygons-btn').addEventListener('click', function () {
    drawControl._toolbars.edit._modes.edit.handler.enable(); // Abilita la modalità di modifica
  });
    } // Fine della funzione initializeMap() 
  
    // Carica groupedByUser dal server
  
  // Funzione per aggiornare la mappa
  function updateMap(groupedByUser) {
    console.log('Dati ricevuti in updateMap:', groupedByUser);

    if (!groupedByUser || Object.keys(groupedByUser).length === 0) {
        console.error('GroupedByUser è vuoto o non valido:', groupedByUser);
        return;
    }

    layerGroup.clearLayers(); // Rimuove tutti i marker e i poligoni esistenti

    // Stili per i poligoni
    const polylineStyles = {
        "bon": { color: 'blue', weight: 4 },
        "moyen": { color: 'gray', weight: 4 },
        "bas": { color: 'red', weight: 4 }
    };
    
    // Icone per i marker
    const icons = {
        "bon": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
        }),
        "moyen": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
        }),
        "bas": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
        })
    };

    

    // Itera sugli utenti per creare marker e poligoni
    Object.keys(groupedByUser).forEach(userId => {
        const userGroup = groupedByUser[userId];
        console.log(`Creazione di marker e poligoni per l'utente ${userId}`);

       // Reset per ogni categoria
       const groupedMarkers = {
            "bon": [],
            "moyen": [],
            "bas": []
        };

        // Itera sulle categorie definite
        userGroup.forEach(category => {
            if (!userGroup[category] || !Array.isArray(userGroup[category])) {
                console.warn(`Nessun dato valido per la categoria "${category}" dell'utente ${userId}`);
                return; // Salta se non è un array valido
            }

            const articles = userGroup[category];
            const latLngs = []; // Raccolta delle coordinate per il poligono

            // Aggiungi marker per ogni articolo
            articles.forEach(article => {
                if (!article.latitude || !article.longitude) {
                    console.warn('Articolo con coordinate mancanti:', article);
                    return; // Salta articoli con coordinate invalide
                }

                const userIcon = icons[category] || icons['moyen'];
                const marker = L.marker([article.latitude, article.longitude], { icon: userIcon });
                marker.bindPopup(`
                    <strong>${article.name}</strong><br>
                    Categoria: ${article.category}<br>
                    <img src="/uploads/${article.image}" width="50">
                `);
                layerGroup.addLayer(marker); // Aggiunge il marker al layer
                latLngs.push([article.latitude, article.longitude]); // Aggiungi le coordinate al poligono
            });

            // Crea un poligono se ci sono almeno 3 punti
            if (latLngs.length >= 3) {
                const polygon = L.polygon(latLngs, polylineStyles[category]);
                drawnItems.addLayer(polygon); // Aggiungi il poligono al layer
            }
        });
    });

    // Adatta la mappa per includere tutti i marker e i poligoni
    if (layerGroup.getLayers().length > 0) {
        map.fitBounds(layerGroup.getBounds());
    }
}
  

    // Function to handle map visibility
    function toggleMap() { 

      const mapElement = document.getElementById('map');
      const toggleButton = document.getElementById('toggle-map');
  
      if (mapElement.style.display === 'none') {
        mapElement.style.display = 'block';
        toggleButton.textContent = 'Efface la carte';

        // Initialize map only once, then update content
        if (!map) {
          initializeMap();
        }
           // Recupera i dati e aggiorna la mappa
   fetch('/api/grouped-by-user')
  .then(response => {
    if (!response.ok) {
      throw new Error(`Errore nella risposta del server: ${response.status}`);
    }
    return response.json();
  })
  .then(groupedByUser => {
    console.log('Dati ricevuti:', groupedByUser);
    if (!groupedByUser || typeof groupedByUser !== 'object') {
      console.error('I dati ricevuti non sono validi:', groupedByUser);
      return;
    }
    updateMap(groupedByUser); // Aggiorna la mappa con i dati validi
  })
  .catch(error => {
    console.error('Errore nel recupero dei dati dal server:', error);
  });


        setTimeout(() => {
          map.invalidateSize(); // // Ridimensiona la mappa
         if (groupedByUser) updateMap(groupedByUser); // Passa i dati esistenti
        }, 100); // Short delay to ensure rendering
      } else {
        mapElement.style.display = 'none';
        toggleButton.textContent = 'Visualiser la carte';
      }
    }

    // Attach event listener to toggle button
    document.getElementById('toggle-map').addEventListener('click', toggleMap);
  });
</script>
<script defer>

  function saveMapChanges(articleId, newLat, newLng) {
      fetch(`/api/articles/${articleId}`, {
          method: 'PUT',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ latitudeSelectionee: newLat, longitudeSelectionee: newLng })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
           console.log("Calling API with ID:", articleId);
              console.log("Modifica salvata nel database.", data.article);
          } else {
              console.error("Errore durante il salvataggio:", data.message);
          }
      })
      .catch(error => console.error("Errore nel salvataggio della modifica:", error));
  }

 
</script>

<%- include('layout/footer') %>