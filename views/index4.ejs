
<!-- Map Initialization Script -->
<script defer>
  document.addEventListener("DOMContentLoaded", function() {
    let map; // Declare map variable
    let layerGroup = L.featureGroup(); // Initialize layerGroup once
    var drawnItems = new L.FeatureGroup();

    // Function to initialize the map (runs only once)
    function initializeMap() {
      map = L.map("map", { center: [43.2, 1.30], zoom: 10 });

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", { 
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
      }).addTo(map);
     
      map.addLayer(drawnItems); // Add drawnItems layer to map     
      layerGroup.addTo(map); // Add the feature group to the map
   
    var drawControl = new L.Control.Draw({
       edit: {
        featureGroup: drawnItems,  // Gruppo di poligoni che possono essere modificati
        edit: true,                // Permetti la modifica dei poligoni
        remove: false              // Non permettere la rimozione (puoi cambiarlo)
    },
    draw: false  // Disabilita la creazione di nuovi poligoni
});
map.addControl(drawControl);

      // Evento per la modifica dei poligoni
      map.on('draw:edited', function(event) {
        var layers = event.layers;
        layers.eachLayer(function(layer) {
          console.log(layer.getLatLngs()); // Mostra i nuovi vertici
        });
      });
    // Aggiungi l'evento per il pulsante che abilita la modifica dei poligoni
    document.getElementById('edit-polygons-btn').addEventListener('click', function () {
    drawControl._toolbars.edit._modes.edit.handler.enable(); // Abilita la modalitÃ  di modifica
  });
    } // Fine della funzione initializeMap() 
  
    // Carica groupedByUser dal server
  
  // Funzione per aggiornare la mappa
  function updateMap() {
    layerGroup.clearLayers(); // Rimuove tutti i marker e i poligoni esistenti

    // Stili per i poligoni
    const polylineStyles = {
        "bon": { color: 'blue', weight: 4 },
        "moyen": { color: 'gray', weight: 4 },
        "bas": { color: 'red', weight: 4 }
    };

    // Icone per i marker
    const icons = {
        "bon": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
        }),
        "moyen": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
        }),
        "bas": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
        })
    };

    const groupedByUser = {}; // Inizializza il contenitore per gli articoli raggruppati

    // Raggruppa gli articoli per utente e categoria
    filteredUsers.forEach(article => {
        if (!article || typeof article !== 'object') {
            console.error("Articolo non valido:", article);
            return; // Salta articoli non validi
        }

        const userId = article.userId || 'Unknown';
        const category = article.category;
        const lat = parseFloat(article.latitudeSelectionee); // Usa latitudeSelectionee
        const lng = parseFloat(article.longitudeSelectionee); // Usa longitudeSelectionee

        if (isNaN(lat) || isNaN(lng)) {
            console.warn(`Coordinate non valide per l'articolo con ID ${article._id}:`, { lat, lng });
            return; // Salta l'articolo se le coordinate sono invalide
        }

        // Inizializza la struttura per l'utente e la categoria
        if (!groupedByUser[userId]) {
            groupedByUser[userId] = { bon: [], moyen: [], bas: [] };
        }

        // Aggiungi l'articolo alla categoria corretta
        if (category in groupedByUser[userId]) {
            groupedByUser[userId][category].push({
                _id: article._id,
                name: article.name,
                category,
                latitude: lat,
                longitude: lng,
                image: article.image
            });
        } else {
            console.warn(`Categoria non valida per l'articolo con ID ${article._id}: ${article.category}`);
        }
    });

    // Itera su groupedByUser per creare marker e poligoni
    Object.keys(groupedByUser).forEach(userId => {
        const userGroup = groupedByUser[userId];
        console.log(`Creazione di marker e poligoni per l'utente ${userId}:`, userGroup);
         // Itera sulle categorie (bon, moyen, bas)
        for (const category in userGroup) {
          //console.log(`Categoria: ${category}, articoli:`, articles);
            const articles = userGroup[category];
            const latLngs = []; // Raccoglie i punti per creare i poligoni

            articles.forEach(article => {
                const userIcon = icons[category] || icons['moyen'];

                // Crea il marker
                const singleMarker = L.marker([article.latitude, article.longitude], { icon: userIcon, draggable: true });
                console.log(`Marker creato per l'articolo ${article._id} nella categoria ${category}`);

                // Evento di trascinamento per salvare le modifiche
                singleMarker.on('dragend', function (e) {
                    const newLatLng = e.target.getLatLng();
                    saveMapChanges(article._id, newLatLng.lat, newLatLng.lng);
                });

                // Bind del popup al marker
                singleMarker.bindPopup(`
                    <br><strong>${article.name}</strong></br>
                    <br><strong>${article.category}</strong></br>
                    <div class='flex-shrink-0 h-20 w-20'>
                        <img class='h-20 w-20 rounded-full' alt='' src="/uploads/${article.image}">
                    </div>`
                );

                layerGroup.addLayer(singleMarker); // Aggiungi il marker al layerGroup
                latLngs.push([article.latitude, article.longitude]); // Raccogli le coordinate per i poligoni
            });

            // Crea un poligono chiuso per la categoria, solo se ci sono almeno 3 punti
            if (latLngs.length >= 3) {
    const polygon = L.polygon(latLngs, polylineStyles[category]);
    console.log(`Poligono creato per utente ${userId}, categoria ${category}, coordinate:`, latLngs);
    drawnItems.addLayer(polygon); // Aggiungi il poligono al gruppo disegnato
}
        }
    });

    // Adatta la mappa per includere tutti i marker e i poligoni
    if (layerGroup.getLayers().length > 0) {
        map.fitBounds(layerGroup.getBounds());
    }
}


    // Function to update markers and polylines on the map
    /*function updateMap() {
      layerGroup.clearLayers(); // Clear existing markers/polylines

      if (typeof filteredUsers !== 'undefined' && filteredUsers.length > 0) {
        const polylineStyles = {
          "bon": { color: 'blue', weight: 4 },
          "moyen": { color: 'gray', weight: 4 },
          "bas": { color: 'red', weight: 4 }
        };

        const icons = {
          "bon": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png'
          }),
          "moyen": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-grey.png'
          }),
          "bas": L.icon({
            iconSize: [25, 41],
            iconAnchor: [10, 41],
            popupAnchor: [2, -40],
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png'
          })
        };

        filteredUsers.forEach((article, idx) => {
          const lat = parseFloat(article.latitudeSelectionee);
          const lng = parseFloat(article.longitudeSelectionee);
          const userIcon = icons[article.category] || icons['moyen'];
          const polylineStyle = polylineStyles[article.category] || polylineStyles['moyen'];

          // Create marker for the current article
          const singleMarker = L.marker([lat, lng], { icon: userIcon, draggable: true });
          singleMarker.bindPopup(`
            <br><strong>${article.name}</strong></br>
            <br><strong>${article.category}</strong></br>
            <div class='flex-shrink-0 h-20 w-20'>
              <img class='h-20 w-20 rounded-full' alt='' src="/uploads/${article.image}">
            </div>`
          );
          layerGroup.addLayer(singleMarker);

          // Create polyline to the next article
          const nextArticle = filteredUsers[idx + 1];
          if (nextArticle) {
            const nextLat = parseFloat(nextArticle.latitudeSelectionee);
            const nextLng = parseFloat(nextArticle.longitudeSelectionee);
            const polyline = L.polyline([[lat, lng], [nextLat, nextLng]], polylineStyle);
            layerGroup.addLayer(polyline);
          }
        });

        // Fit the map to the bounds of the markers and polylines
        if (layerGroup.getLayers().length > 0) {
          map.fitBounds(layerGroup.getBounds());
        }
      }
    }
*/
    // Function to handle map visibility
    function toggleMap() { 

      const mapElement = document.getElementById('map');
      const toggleButton = document.getElementById('toggle-map');
  
      if (mapElement.style.display === 'none') {
        mapElement.style.display = 'block';
        toggleButton.textContent = 'Efface la carte';

        // Initialize map only once, then update content
        if (!map) {
          initializeMap();
        }

        setTimeout(() => {
          map.invalidateSize(); // Ensure map is resized
          updateMap(); // Update markers and polylines
        }, 100); // Short delay to ensure rendering
      } else {
        mapElement.style.display = 'none';
        toggleButton.textContent = 'Visualiser la carte';
      }
    }

    // Attach event listener to toggle button
    document.getElementById('toggle-map').addEventListener('click', toggleMap);
  });
</script>
<script defer>
// Carica groupedByUser dinamicamente dal server
fetch('/api/grouped-by-user')
.then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    console.log("GroupedByUser caricato dal server:", data);
    if (Object.keys(data).length === 0) {
      console.warn("Nessun dato restituito dal server.");
    }
  })
  .catch(error => {
    console.error("Errore nel caricamento di GroupedByUser:", error);
  });
  function saveMapChanges(articleId, newLat, newLng) {
      fetch(`/api/articles/${articleId}`, {
          method: 'PUT',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ latitudeSelectionee: newLat, longitudeSelectionee: newLng })
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
           console.log("Calling API with ID:", articleId);
              console.log("Modifica salvata nel database.", data.article);
          } else {
              console.error("Errore durante il salvataggio:", data.message);
          }
      })
      .catch(error => console.error("Errore nel salvataggio della modifica:", error));
  }

 
</script>

<%- include('layout/footer') %>